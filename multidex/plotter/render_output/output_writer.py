import plotly.graph_objects as go

from multidex.plotter.config.output_style import (
    BASE_SIZE_SETTING,
    GRAPH_SETTINGS,
    AXIS_SETTINGS,
    MARKER_SETTINGS,
    COLORBAR_SETTINGS,
    SCATTER_POINT_SCALE_SETTING,
)


def apply_output_image_style(fig):
    fig.update_layout(**GRAPH_SETTINGS)
    fig.update_xaxes(**AXIS_SETTINGS)
    fig.update_yaxes(**AXIS_SETTINGS)
    for trace in fig.select_traces():
        marker = trace.marker
        if isinstance(marker.size, int):
            marker_size = marker.size * SCATTER_POINT_SCALE_SETTING
        else:
            marker_size = [
                SCATTER_POINT_SCALE_SETTING * size for size in marker.size
            ]
        trace.update(marker=MARKER_SETTINGS | {"size": marker_size})
    # again, hacky to use typesetting as layout, but...

    coloraxis = next(fig.select_coloraxes())
    if coloraxis.colorscale is not None:
        colorbar = coloraxis.colorbar
        if len(colorbar.title.text) > 12:
            colorbar.title.side = "right"
            colorbar.title.text = f"<br><br><br> &nbsp;{coloraxis.colorbar.title.text}"

        else:
            colorbar.title.side = "top"
            colorbar.title.text = f"{coloraxis.colorbar.title.text}<br> &nbsp;"
        colorbar.tickvals = coloraxis.colorbar.tickvals
        colorbar.update(COLORBAR_SETTINGS)
        coloraxis["colorbar"] = colorbar
        fig.update_coloraxes(coloraxis)
    else:
        marg = GRAPH_SETTINGS['margin'].copy()
        marg['r'] -= 180
        fig.update_layout({'margin': marg})
    return fig


def save_main_scatter_plot(scatter_fig_dict, aspect_ratio):
    """
    main_scatter_fig: dict rep of figure generated by main_scatter_graph()
    aspect_ratio: its aspect ratio onscreen (w/h)
    """
    import sys

    scatter_fig = go.Figure(scatter_fig_dict)
    scatter_fig = apply_output_image_style(scatter_fig)
    return scatter_fig.to_image(
        format="png",
        width=BASE_SIZE_SETTING * aspect_ratio,
        height=BASE_SIZE_SETTING,
        engine="kaleido"
    )
