import datetime as dt
import os
import re
from pathlib import Path

import plotly.graph_objects as go
import wand.image

import plotter.application
from plotter.config.output_style import (
    BASE_SIZE,
    GRAPH_SETTINGS,
    AXIS_SETTINGS,
    MARKER_SETTINGS,
    COLORBAR_SETTINGS,
    SCATTER_POINT_SCALE,
)


def make_svg_font_style_block():
    asset_path = str(
        Path(Path(plotter.application.__file__).parent, "assets/")
    )
    font_path = Path(asset_path, "fonts")
    font_stylesheet_path = Path(asset_path, "css/fonts.css")
    with open(font_stylesheet_path) as font_stylesheet:
        fonts_css = font_stylesheet.read()
    fonts_css = fonts_css.replace("../fonts", str(font_path))
    return f"<style>{fonts_css}</style>"


def inject_style_into_svg(svgtext, style):
    """
    crudely inject a style block (or whatever) into the first <defs> block
    of an svg file expressed as a string
    """
    defs_end = re.search("defs.*?>", svgtext).span()[1]
    return svgtext[:defs_end] + style + svgtext[defs_end:]


def load_svg_as_wand(injected_svg):
    # have to do this weird hack to trick ImageMagick into finding the fonts...
    with open("temp_svg.svg", "w") as file:
        file.write(injected_svg)
    wand_image = wand.image.Image(filename="temp_svg.svg")
    os.unlink("temp_svg.svg")
    return wand_image


def inject_fonts_and_reload(svgtext):
    font_style_block = make_svg_font_style_block()
    svgtext = inject_style_into_svg(svgtext, font_style_block)
    return load_svg_as_wand(svgtext)


def apply_output_image_style(fig):
    fig.update_layout(**GRAPH_SETTINGS)
    fig.update_xaxes(**AXIS_SETTINGS)
    fig.update_yaxes(**AXIS_SETTINGS)
    marker = next(fig.select_traces()).marker
    if isinstance(marker.size, int):
        marker_size = marker.size * SCATTER_POINT_SCALE
    else:
        marker_size = [SCATTER_POINT_SCALE * size for size in marker.size]
    # hacky, but the alternative seems to be editing its transform attribute...
    colorbar_dict = COLORBAR_SETTINGS.copy()
    # again, hacky to use typesetting as layout, but...

    coloraxis = next(fig.select_coloraxes())
    if coloraxis:
        if "colorbar" in coloraxis:
            colorbar = coloraxis.colorbar
            if len(colorbar.title.text) > 12:
                colorbar.title.side = "right"
                colorbar.title.text = f"<br><br><br> &nbsp;{coloraxis.colorbar.title.text}"

            else:
                colorbar.title.side = "top"
                colorbar.title.text = f"{coloraxis.colorbar.title.text}<br> &nbsp;"
            colorbar.tickvals = coloraxis.colorbar.tickvals
            coloraxis["colorbar"] = colorbar
            fig.update_coloraxes(coloraxis)

    # more breaks for longer ticks?
    marker_dict = (
        MARKER_SETTINGS | {"size": marker_size}
    )
    fig.update_traces(marker=marker_dict)
    return fig


def save_main_scatter_plot(scatter_fig_dict, aspect_ratio, instrument_code):
    """
    main_scatter_fig: dict rep of figure generated by main_scatter_graph()
    aspect_ratio: its aspect ratio onscreen (w/h)
    """
    scatter_fig = go.Figure(scatter_fig_dict)
    scatter_fig = apply_output_image_style(scatter_fig)
    svgtext = scatter_fig.to_image(
        format="svg",
        width=BASE_SIZE * aspect_ratio,
        height=BASE_SIZE,
    ).decode()
    wand_image = inject_fonts_and_reload(svgtext)
    fn_timestamp = dt.datetime.now().strftime("%Y%m%dT%H%M%S")
    output_path = Path("exports", "images", instrument_code)
    os.makedirs(output_path, exist_ok=True)
    wand_image.save(filename=Path(output_path, f"{fn_timestamp}.png"))
