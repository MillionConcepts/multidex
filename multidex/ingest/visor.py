"""
simple tools to ingest simulated spectra produced by VISOR.
does not handle images at the moment.
"""

import os
import re
from functools import partial
from pathlib import Path
from typing import Callable

import django
from cytoolz import valfilter
from fs.osfs import OSFS

from multidex_utils import directory_of

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "multidex.settings")
os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
django.setup()

from plotter.models import INSTRUMENT_MODEL_MAPPING


def find_ingest_files(
    path: Path,
    recursive: bool = False,
    csv_predicate: Callable[[str], bool] = lambda x: False,
    image_predicate: Callable[[str], bool] = lambda x: False,
):
    if recursive:
        tree = OSFS(directory_of(path))
        csv_files = map(
            tree.getsyspath, filter(csv_predicate, tree.walk.files())
        )
        image_files = map(
            tree.getsyspath, filter(image_predicate, tree.walk.files())
        )
    elif path.is_dir:
        csv_files = filter(csv_predicate, map(str, path.iterdir()))
        image_files = filter(image_predicate, map(str, path.iterdir()))
    else:
        csv_files = [str(path)]
        image_files = filter(image_predicate, map(str, path.iterdir()))
    return csv_files, image_files


def visor_stemmer(fn: str):
    return re.sub(r"(_simulated)?\..*", "", Path(fn).name)


# ignoring images for now. really need more examples to
# make this worth it.

# def process_image_files(image_files):
#     image_df = pd.DataFrame(image_files, columns=["path"])
#     image_df["stem"] = [
#         stem for stem in image_df["path"].apply(visor_stemmer)
#     ]
#     image_df["save"] = False
#     return image_df

# def match_images(csv_fn, image_df):
#     file_stem = visor_stemmer(csv_fn)
#     image_matches = image_df.loc[image_df["stem"] == str(file_stem)]
#     if len(image_matches) > 1:
#         raise ValueError("too many matching images")
#     return  file_stem + "-thumb.jpg", image_matches.index


def looks_like_visor_file(path, instrument_code):
    brief_name = INSTRUMENT_MODEL_MAPPING[
        instrument_code
    ].instrument_brief_name
    return f"simulated_{brief_name}" in str(path) and str(path).endswith(
        ".csv"
    )


def process_visor_file(visor_fn, instrument_code):
    with open(visor_fn) as stream:
        lines = filter(lambda l: len(l) > 1, stream.readlines())
    lines = tuple(map(lambda l: l.strip().split(','), lines))
    if len(lines) != 2:
        raise ValueError(f"Malformatted VISOR file {visor_fn}.")
    visor_dict = {k: v for k, v in zip(*lines)}
    model = INSTRUMENT_MODEL_MAPPING[instrument_code]
    present_filters = set(model.filters).intersection(visor_dict.keys())
    if len(present_filters) == 0:
        raise ValueError(
            "No filters in this file match this instrument's filters."
        )
    model_dict = {}
    for filt in present_filters:
        model_dict[filt.lower()] = float(visor_dict[filt])
        model_dict[filt.lower() + "_std"] = 0
    # this is a hack for "binocular" instruments with multiple close filters;
    # VISOR doesn't render both of them because it's visually pointless; for
    # MultiDEx, it's not
    try:
        c_a_f = model.canonical_averaged_filters
        for filt in present_filters:
            if filt in c_a_f.keys():
                continue
            pair = list(
                valfilter(
                    lambda v: filt in v, model.virtual_filter_mapping
                ).values()
            )[0]
            other = [p for p in pair if p != filt][0]
            if other in present_filters:
                continue
            model_dict[other.lower()] = model_dict[filt.lower()]
            model_dict[other.lower() + "_std"] = 0
    except AttributeError:
        pass
    model_dict[
        "name"
    ] = (
        f"{visor_dict['NAME'].strip(',')} - "
        f"{visor_dict['SAMPLE_ID'].strip(',')}"
    )
    model_dict["filename"] = Path(visor_fn).name
    # model_dict["ingest_time"] = dt.datetime.utcnow().isoformat()
    model_dict["feature"] = "lab spectrum"
    model_dict["color"] = "black"
    model_dict["incidence_angle"] = 0
    try:
        spectrum = model(**model_dict)
        spectrum.clean()
        spectrum.save()
    except KeyboardInterrupt:
        raise
    except Exception as ex:
        print(f"failed on {visor_fn}: {type(ex)}({str(ex)})")
        return
    return spectrum


def perform_ingest(path_or_file, instrument_code, *, recursive: "r" = False):
    """
    ingests exported csv-ish simulated spectra files generated by VISOR
    into a multidex database.

    param path_or_file: VISOR file or directory containing VISOR files.
    param instrument_code: name of multidex database (e.g. MCAM, ZCAM) to place
        the VISOR files in
    param recursive: attempts to ingest all VISOR files and context images
        in directory tree, regardless of what specific file you pass it
    """
    path = Path(path_or_file)
    if not path.exists():
        raise FileNotFoundError(f"{path} does not exist.")
    if path.is_file():
        if not looks_like_visor_file(path, instrument_code):
            raise ValueError(
                f"{path} does not appear to be a simulated file for"
                f"{instrument_code}."
             )
        visor_files = [path]
    else:
        visor_files, _ = find_ingest_files(
            path,
            recursive,
            partial(looks_like_visor_file, instrument_code=instrument_code),
        )
    for visor_file in visor_files:
        res = process_visor_file(visor_file, instrument_code)
        if res is not None:
            print(f"successfully ingested {visor_file}")
